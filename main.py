import asyncio
import logging
import os
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database import init_db, save_geo, get_random_geo, get_all_geo, save_fact, get_all_facts, get_random_fact, delete_fact
from geo_utils import extract_geo_from_photo
from scheduler import schedule_daily_post
from config import TELEGRAM_TOKEN, CHANNEL_ID, OPENAI_API_KEY, GEMINI_API_KEY
from gpt_utils import get_smart_reply

from aiogram.client.default import DefaultBotProperties

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

start_messages = [
    "üëã –ë—É–≤–∞–π –∑–¥–æ—Ä–æ–≤, –∫–æ–ª–µ–≥–æ –ø–æ —Ä–æ–∑–∫–æ–ø–∫–∞—Ö!",
    "üîç –®—É—Ä—Ñ–∞–Ω –Ω–∞ –∑–≤‚Äô—è–∑–∫—É! –©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏–∫–æ–ø–∞—î–º–æ?",
    "üè∫ –Ø —Ç—É—Ç, –∑ –ø–∏–ª–∫–æ—é –π —â—ñ—Ç–∫–æ—é. –ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–≥–æ–¥!",
    "üó∫Ô∏è –°—Ö–æ–∂–µ, —Ö—Ç–æ—Å—å —à—É–∫–∞—î —Å–∫–∞—Ä–±–∏? –Ø –¥–æ–ø–æ–º–æ–∂—É!",
    "üí¨ –ó–∞–ø–∏—Ç–∞–π —â–æ —Ö–æ—á–µ—à, —Ç—ñ–ª—å–∫–∏ –Ω–µ —á—ñ–ø–∞–π –º—ñ–π —Ä–∂–∞–≤–∏–π –∫–∞–∑–∞–Ω!"
]

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(random.choice(start_messages))

@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "<b>üìú –ú–æ—ó –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/geo ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/listgeo ‚Äî –≤—Å—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏\n"
        "/addfact <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é\n"
        "/listfacts ‚Äî –≤—Å—ñ —ñ—Å—Ç–æ—Ä—ñ—ó\n"
        "/deletefact <id> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é\n"
        "/ping ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —è –∂–∏–≤–∏–π"
    )

@dp.message(Command("ping"))
async def ping_cmd(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î.")

@dp.message(Command("geo"))
async def geo_cmd(message: Message):
    coord = await get_random_geo()
    if coord:
        await message.answer(f"üó∫Ô∏è –í–∏–ø–∞–¥–∫–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\nhttps://maps.google.com/?q={coord}")
    else:
        await message.answer("–ë–∞–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Ä–æ–∂–Ω—è.")

@dp.message(Command("listgeo"))
async def list_geo(message: Message):
    coords = await get_all_geo()
    if not coords:
        await message.answer("‚õî –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
        return
    text = "üó∫Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏:\n"
    for i, c in enumerate(coords, 1):
        text += f"{i}. https://maps.google.com/?q={c}\n"
    await message.answer(text)

@dp.message(Command("addfact"))
async def add_fact(message: Message):
    content = message.text[len("/addfact"):].strip()
    if not content:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /addfact")
        return
    await save_fact(content)
    await message.answer("‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –¥–æ–¥–∞–Ω–æ!")

@dp.message(Command("listfacts"))
async def list_facts(message: Message):
    facts = await get_all_facts()
    if not facts:
        await message.answer("–ë–∞–∑–∞ —ñ—Å—Ç–æ—Ä—ñ–π –ø–æ—Ä–æ–∂–Ω—è.")
        return
    msg = "\n\n".join([f"{r['id']}. {r['text']}" for r in facts])
    await message.answer(f"üìö –£—Å—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:\n{msg}")

@dp.message(Command("deletefact"))
async def delete_fact_cmd(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö†Ô∏è –í–∫–∞–∂–∏ ID —ñ—Å—Ç–æ—Ä—ñ—ó: /deletefact <id>")
        return
    result = await delete_fact(int(parts[1]))
    if result:
        await message.answer("üóë –Ü—Å—Ç–æ—Ä—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –¢–∞–∫–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message(F.photo)
async def handle_photo(message: Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    path = f"temp_{photo.file_id}.jpg"
    await bot.download_file(file.file_path, destination=path)
    coords = extract_geo_from_photo(path)
    os.remove(path)
    if coords:
        await save_geo(coords)
        await message.answer(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {coords}")
    else:
        await message.answer("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É —Ü—å–æ–º—É —Ñ–æ—Ç–æ.")

@dp.message(F.text)
async def gpt_reply(message: Message):
    reply = await get_smart_reply(message.text)
    await message.answer(reply)

async def main():
    await init_db()
    schedule_daily_post(scheduler, bot)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())